import java.util.*;

public class Main {

    public static void main(String[] args) {
        int[][] scoreboard = new int[7][2]; // Initialize the scoreboard with seven categories
        Scanner scanner = new Scanner(System.in); // Create a Scanner object to read user input

        // Greet the player and prompt for their name
        System.out.println("Enter your name:");
        String playerName = scanner.nextLine();
        System.out.println("Welcome, " + playerName + "!");

        // Start the game by iterating over seven rounds
        for (int round = 1; round <= 7; round++) {
            System.out.println("Round " + round);

            // Roll the dice and display the rolls
            int[] diceRolls = rollDice();
            System.out.println("The dice rolls are: " + Arrays.toString(diceRolls));

            // For each player, execute their turn
            for (int player = 1; player <= 2; player++) {
                System.out.println("Player " + player + ":");

                // Iterate over the three throws
                for (int throwIndex = 0; throwIndex < 3; throwIndex++) {
                    System.out.println("Throw " + (throwIndex + 1) + " of 3");

                    // Prompt the player to choose a category or defer
                    int choice = getPlayerChoice(scanner);

                    if (choice == 0) { // Defer the throws
                        System.out.println("The throws were deferred.");
                    } else { // Score the throws based on the chosen category
                        int score = calculateScore(diceRolls, choice - 1);
                        updateScoreboard(scoreboard, player, choice - 1, score);
                    }
                }

                // Display the updated scoreboard
                displayScoreboard(scoreboard);
            }
        }

        // Announce the winner
        determineAndAnnounceWinner(scoreboard);
    }
  private static void determineAndAnnounceWinner(int[][] scoreboard) {
      int player1TotalScore = 0;
      int player2TotalScore = 0;

      for (int categoryIndex = 0; categoryIndex < scoreboard.length; categoryIndex++) {
          player1TotalScore += scoreboard[categoryIndex][0];
          player2TotalScore += scoreboard[categoryIndex][1];
      }

      String winner = player1TotalScore > player2TotalScore ? "Player 1" : "Player 2";
      int winningScore = (player1TotalScore > player2TotalScore) ? player1TotalScore : player2TotalScore;

      System.out.println("The winner is " + winner + " with a score of " + winningScore + "!");
  }
    // Function to roll the dice and return the rolls
    private static int[] rollDice() {
        int[] diceRolls = new int[5];

        for (int i = 0; i < diceRolls.length; i++) {
            diceRolls[i] = (int) (Math.random() * 6) + 1;
        }

        return diceRolls;
    }

  private static boolean isSequence(int[] diceRolls) {
      Arrays.sort(diceRolls);

      return Arrays.equals(diceRolls, new int[]{1, 2, 3, 4, 5}) || Arrays.equals(diceRolls, new int[]{2, 3, 4, 5, 6});
  }

    // Function to determine the player's choice and validate it
    private static int getPlayerChoice(Scanner scanner) {
        int choice;

        do {
            System.out.println("Enter your choice: (1-7 to score, 0 to defer)");
            try {
                choice = Integer.parseInt(scanner.nextLine());

                if (choice < 0 || choice > 7) {
                    System.out.println("Invalid choice. Please enter a valid choice between 1 and 7.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid choice. Please enter an integer between 1 and 7.");
                choice = -1; // Reset choice to continue the loop
            }
        } while (choice < 0 || choice > 7);

        return choice;
    }
  private static int countRepetitions(int[] diceRolls, int number) {
      int count = 0;

      for (int diceRoll : diceRolls) {
          if (diceRoll == number) {
              count++;
          }
      }

      return count;
  }
    // Function to calculate the score based on the dice rolls and chosen category
    private static int calculateScore(int[] diceRolls, int category) {
        if (category == 7) { // Check for a consecutive number sequence
            return isSequence(diceRolls) ? 20 : 0;
        } else { // Calculate the score based on the chosen number
            int selectedNumber = category + 1;
            return countRepetitions(diceRolls, selectedNumber) * selectedNumber;
        }
    }

    // Function to update the scoreboard with the calculated score
    private static void updateScoreboard(int[][] scoreboard, int player, int category, int score) {
        scoreboard[category][player - 1] += score; // Update the score for the selected category and player
    }

    // Function to display the scoreboard with the current scores
    private static void displayScoreboard(int[][] scoreboard) {
        System.out.println("Scoreboard:");

        for (int categoryIndex = 0; categoryIndex < scoreboard.length; categoryIndex++) {
                  int selectedNumber = categoryIndex + 1;
                  System.out.println("Category " + selectedNumber + ":");

                  for (int playerIndex = 0; playerIndex < scoreboard[0].length; playerIndex++) {
                      int playerScore = scoreboard[categoryIndex][playerIndex];
                      System.out.println("Player " + (playerIndex + 1) + " - " + playerScore);
                  }
              }
    }
}
